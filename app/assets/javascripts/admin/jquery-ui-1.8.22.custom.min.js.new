/* ((a, b) ->
 c = (b, c) ->
 e = b.nodeName.toLowerCase()
 if "area" is e
 f = b.parentNode
 g = f.name
 h = undefined
 return (if not b.href or not g or f.nodeName.toLowerCase() isnt "map" then not 1 else (h = a("img[usemap=#" + g + "]")[0]
         !!h and d(h)
         ))
 ((if /input|select|textarea|button|object/.test(e) then not b.disabled else (if "a" is e then b.href or c else c))) and d(b)
 d = (b) ->
 not a(b).parents().andSelf().filter(->
     a.curCSS(this, "visibility") is "hidden" or a.expr.filters.hidden(this)
     ).length
 a.ui = a.ui or {}
 return  if a.ui.version
 a.extend(a.ui,
     version: "1.8.22"
     keyCode:
     ALT: 18
     BACKSPACE: 8
     CAPS_LOCK: 20
     COMMA: 188
     COMMAND: 91
     COMMAND_LEFT: 91
     COMMAND_RIGHT: 93
     CONTROL: 17
     DELETE: 46
     DOWN: 40
     END: 35
     ENTER: 13
     ESCAPE: 27
     HOME: 36
     INSERT: 45
     LEFT: 37
     MENU: 93
     NUMPAD_ADD: 107
 NUMPAD_DECIMAL: 110
 NUMPAD_DIVIDE: 111
 NUMPAD_ENTER: 108
 NUMPAD_MULTIPLY: 106
 NUMPAD_SUBTRACT: 109
 PAGE_DOWN: 34
 PAGE_UP: 33
 PERIOD: 190
 RIGHT: 39
 SHIFT: 16
 SPACE: 32
 TAB: 9
 UP: 38
 WINDOWS: 91
 )
 a.fn.extend(
         propAttr: a.fn.prop or a.fn.attr
         _focus: a.fn.focus
         focus: (b, c) ->
         (if typeof b is "number" then @each(->
                                             d = this
                                             setTimeout (->
                                                 a(d).focus()
                                                 c and c.call(d)
                                                 ), b
                                            ) else @_focus.apply(this, arguments_))

         scrollParent: ->
         b = undefined
         (if a.browser.msie and /(static|relative)/.test(@css("position")) or /absolute/.test(@css("position")) then b = @parents().filter(->
                                                                                                                                           /(relative|absolute|fixed)/.test(a.curCSS(this, "position", 1)) and /(auto|scroll)/.test(a.curCSS(this, "overflow", 1) + a.curCSS(this, "overflow-y", 1) + a.curCSS(this, "overflow-x", 1))
                                                                                                                                          ).eq(0) else b = @parents().filter(->
                                                                                                                                              /(auto|scroll)/.test a.curCSS(this, "overflow", 1) + a.curCSS(this, "overflow-y", 1) + a.curCSS(this, "overflow-x", 1)
                                                                                                                                              ).eq(0))
         (if /fixed/.test(@css("position")) or not b.length then a(document) else b)

 zIndex: (c) ->
 return @css("zIndex", c)  if c isnt b
    if @length
d = a(this[0])
    e = undefined
    f = undefined
    while d.length and d[0] isnt document
    e = d.css("position")
    if e is "absolute" or e is "relative" or e is "fixed"
    f = parseInt(d.css("zIndex"), 10)
    return f  if not isNaN(f) and f isnt 0
d = d.parent()
    0

    disableSelection: ->
    @bind ((if a.support.selectstart then "selectstart" else "mousedown")) + ".ui-disableSelection", (a) ->
a.preventDefault()


    enableSelection: ->
    @unbind ".ui-disableSelection"
    )
    a("<a>").outerWidth(1).jquery or a.each(["Width", "Height"], (c, d) ->
            h = (b, c, d, f) ->
            a.each(e, ->
                c -= parseFloat(a.curCSS(b, "padding" + this, not 0)) or 0
                d and (c -= parseFloat(a.curCSS(b, "border" + this + "Width", not 0)) or 0)
                f and (c -= parseFloat(a.curCSS(b, "margin" + this, not 0)) or 0)
                )
            c
            e = (if d is "Width" then ["Left", "Right"] else ["Top", "Bottom"])
            f = d.toLowerCase()
            g =
            innerWidth: a.fn.innerWidth
            innerHeight: a.fn.innerHeight
            outerWidth: a.fn.outerWidth
            outerHeight: a.fn.outerHeight

            a.fn["inner" + d] = (c) ->
            (if c is b then g["inner" + d].call(this) else @each(->
                                                                 a(this).css f, h(this, c) + "px"
                                                                ))

            a.fn["outer" + d] = (b, c) ->
            (if typeof b isnt "number" then g["outer" + d].call(this, b) else @each(->
                                                                                    a(this).css f, h(this, b, not 0, c) + "px"
                                                                                   ))
            )
            a.extend(a.expr[":"],
                    data: (if a.expr.createPseudo then a.expr.createPseudo((b) ->
                            (c) ->
                            !!a.data(c, b)
                            ) else (b, c, d) ->
                        !!a.data(b, d[3])
                        )
                    focusable: (b) ->
                    c b, not isNaN(a.attr(b, "tabindex"))

                    tabbable: (b) ->
                    d = a.attr(b, "tabindex")
                    e = isNaN(d)
                    (e or d >= 0) and c(b, not e)
                    )
            a(->
                    b = document.body
                    c = b.appendChild(c = document.createElement("div"))
                    c.offsetHeight
                    a.extend(c.style,
                        minHeight: "100px"
                        height: "auto"
                        padding: 0
                        borderWidth: 0
                        )
                    a.support.minHeight = c.offsetHeight is 100
                    a.support.selectstart = "onselectstart" of c
                    b.removeChild(c).style.display = "none"
             )
a.curCSS or (a.curCSS = a.css)
    a.extend(a.ui,
            plugin:
            add: (b, c, d) ->
            e = a.ui[b]::
            for f of d
            e.plugins[f] = e.plugins[f] or []
            e.plugins[f].push([c, d[f]])

            call: (a, b, c) ->
            d = a.plugins[b]
            return  if not d or not a.element[0].parentNode
            e = 0

            while e < d.length
            a.options[d[e][0]] and d[e][1].apply(a.element, c)
            e++

            contains: (a, b) ->
            (if document.compareDocumentPosition then a.compareDocumentPosition(b) & 16 else a isnt b and a.contains(b))

            hasScroll: (b, c) ->
    return not 1  if a(b).css("overflow") is "hidden"
    d = (if c and c is "left" then "scrollLeft" else "scrollTop")
    e = not 1
    (if b[d] > 0 then not 0 else (b[d] = 1
                                  e = b[d] > 0
                                  b[d] = 0
                                  e
                                 ))

    isOverAxis: (a, b, c) ->
    a > b and a < b + c

    isOver: (b, c, d, e, f, g) ->
a.ui.isOverAxis(b, d, f) and a.ui.isOverAxis(c, e, g)
    ) 
    ) jQuery *\
